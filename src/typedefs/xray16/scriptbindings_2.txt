
[cpp]
class FileStatus
{
    bool Exists { get; }
    bool External { get; }
}

[cpp]
class SZoneMapEntityData
{
    vector& pos { get; set; }
    unsigned int color { get; set; }
    SZoneMapEntityData();
}


[cpp]
class game_cl_mp_script : game_cl_mp
{
    game_PlayerState* createPlayerState();
    bool CanBeReady();
    game_object* GetObjectByGameID(unsigned short);
    game_cl_mp_script();
    int round { get; }
    game_PlayerState* GetPlayerByOrderID(unsigned int);
    void TranslateGameMessage(unsigned int,net_packet&);
    void Init();
    char const* GetRoundTime();
    unsigned int start_time { get; }
    ClientID GetClientIDByOrderID(unsigned int);
    void CommonMessageOut(char const*);
    void EventSend(net_packet*);
    unsigned int GetPlayersCount();
    void FillMapEntities(ZoneMapEntities&);
    CUIGameCustom* createGameUI();
    bool OnKeyboardPress(int);
    void net_import_state(net_packet&);
    void shedule_Update(unsigned int);
    game_PlayerState* local_player { get; set; }
    game_PlayerState* GetLocalPlayer();
    bool OnKeyboardRelease(int);
    enum EGameIDs& type { get; set; }
    ClientID& local_svdpnid { get; set; }
    void EventGen(net_packet*,unsigned short,unsigned short);
    void GameEventGen(net_packet*,unsigned short);
}

[cpp]
class rq_result
{
    game_object* object { get; }
    int element { get; }
    float range { get; }
    rq_result();
}

[cpp]
class phcondition_callonstep
{
    void set_global_time_ms(unsigned int);
    void set_time_interval_ms(unsigned int);
    void set_step(unsigned __int64);
    void set_global_time_s(float);
    void set_time_interval_s(float);
    void set_steps_interval(unsigned __int64);
    phcondition_callonstep();
}

[cpp]
class game_cl_GameState : game_GameState
{
    game_cl_GameState();
    game_PlayerState* local_player { get; set; }
    int round { get; }
    enum EGameIDs& type { get; set; }
    ClientID& local_svdpnid { get; set; }
    unsigned int start_time { get; }
}

[cpp]
class game_phases
{
    const int GAME_PHASE_INPROGRESS = 1;
    const int GAME_PHASE_NONE = 0;
    const int GAME_PHASE_PENDING = 2;
    const int GAME_PHASE_SCRIPT_BEGINS_FROM = 9;
    const int GAME_PHASE_TEAM1_SCORES = 3;
    const int GAME_PHASE_TEAM2_SCORES = 4;
    const int GAME_PHASE_TEAMS_IN_A_DRAW = 7;
}


[cpp]
class game_sv_Deathmatch : game_sv_GameState
{
    game_sv_Deathmatch();
    int round { get; }
    struct TeamStruct* GetTeamData(unsigned int);
    char const* type_name();
    unsigned int start_time { get; }
    enum EGameIDs& type { get; set; }
}


[cpp]
class game_sv_mp : game_sv_GameState
{
    game_sv_mp();
    void signal_Syncronize();
    void KillPlayer(ClientID,unsigned short);
    int round { get; }
    enum EGameIDs& type { get; set; }
    void SendPlayerKilledMessage(unsigned short,enum KILL_TYPE,unsigned short,unsigned short,enum SPECIAL_KILL_TYPE);
    unsigned int start_time { get; }
}

[cpp]
class ray_pick
{
    int get_element();
    void set_range(float);
    void set_position(vector&);
    float get_distance();
    game_object* get_object();
    void set_direction(vector&);
    ray_pick(vector&,vector&,float,enum collide::rq_target,game_object*);
    bool query();
    void set_ignore_object(game_object*);
    void set_flags(enum collide::rq_target);
    rq_result get_result();
}


    [cpp]
    class game_sv_GameState : game_GameState
    {
        RPoint getRP(unsigned short,unsigned int);
        void u_EventSend(net_packet&,unsigned int);
        game_PlayerState* get_id(ClientID);
        game_sv_GameState();
        int round { get; }
        unsigned int get_players_count();
        void GenerateGameMessage(net_packet&);
        char [64]& get_option_s(char const*,char const*,char const*);
        char const* get_player_name_id(ClientID);
        int get_option_i(char const*,char const*,int);
        unsigned int start_time { get; }
        unsigned int getRPcount(unsigned short);
        char const* get_name_id(ClientID);
        enum EGameIDs& type { get; set; }
        unsigned short get_id_2_eid(ClientID);
        game_PlayerState* get_eid(unsigned short);
    }


[cpp]
class game_PlayerState
{
    void setFlag(unsigned short);
    game_PlayerState();
    bool testFlag(unsigned short);
    unsigned char team { get; set; }
    short money_delta { get; set; }
    unsigned short GameID { get; set; }
    char const* getName();
    void net_Import(net_packet&);
    short deaths { get; set; }
    int money_for_round { get; set; }
    void net_Export(net_packet&,int);
    unsigned short ping { get; set; }
    unsigned int RespawnTime { get; set; }
    short kills { get; set; }
    void resetFlag(unsigned short);
    unsigned short lasthitter { get; set; }
    void setName(char const*);
    signed char skin { get; set; }
    unsigned short flags { get; set; }
    class std::vector<unsigned short,class xalloc<unsigned short> >& pItemList { get; set; }
    unsigned short lasthitweapon { get; set; }
    void clear();
    int LastBuyAcount { get; set; }
}



[cpp]
class game_sv_mp_script : game_sv_mp
{
    game_PlayerState* createPlayerState();
    void Create(char const*);
    void OnRoundStart();
    void SetHitParams(net_packet*,float,float);
    void OnRoundEnd();
    void Update();
    float GetHitParamsPower(net_packet*);
    char const* type_name();
    void OnEvent(net_packet&,unsigned short,unsigned int,ClientID);
    float GetHitParamsImpulse(net_packet*);
    void SpawnPlayer(ClientID,char const*,char const*,RPoint);
    void switch_Phase(unsigned int);
    unsigned int start_time { get; }
    game_sv_mp_script();
    void OnPlayerHitPlayer(unsigned short,unsigned short,net_packet&);
    struct TeamStruct* GetTeamData(unsigned int);
    enum EGameIDs& type { get; set; }
    void net_Export_State(net_packet&,ClientID);
    int round { get; }
}


[cpp]
class FractionState
{
    int bonus { get; set; }
    char const* icon { get; set; }
    float power { get; set; }
    int actor_goodwill { get; set; }
    char const* location { get; set; }
    float resource { get; set; }
    char const* icon_big { get; set; }
    int state_vs { get; set; }
    char const* target { get; set; }
    char const* fraction_id { get; set; }
    char const* target_desc { get; set; }
    char const* name { get; set; }
    int member_count { get; set; }


class game_cl_mp : game_cl_GameState
{
    game_cl_mp();
    game_PlayerState* local_player { get; set; }
    int round { get; }
    unsigned int start_time { get; }
    enum EGameIDs& type { get; set; }
    ClientID& local_svdpnid { get; set; }
}

[cpp]
class rq_target
{
    const int rqtBoth = 3;
    const int rqtDyn = 13;
    const int rqtNone = 0;
    const int rqtObject = 1;
    const int rqtObstacle = 8;
    const int rqtShape = 4;
    const int rqtStatic = 2;
}



[cpp]
class game_player_flags
{
    const int GAME_PLAYER_FLAG_LOCAL = 1;
    const int GAME_PLAYER_FLAG_READY = 2;
    const int GAME_PLAYER_FLAG_SCRIPT_BEGINS_FROM = 16;
    const int GAME_PLAYER_FLAG_SPECTATOR = 8;
    const int GAME_PLAYER_FLAG_VERY_VERY_DEAD = 4;
}
