
[cpp]
class CUIListBox : CUIScrollView
{
    void AddExistingItem(CUIListBoxItem*);
    void RemoveItem(CUIWindow*);
    CUIListBox();
    void ShowSelectedItem(bool);
    CUIWindow* GetItem(unsigned int);
    CUIListBoxItem* GetItemByIndex(int);
    unsigned int GetSelectedIndex();
    CUIListBoxItem* GetSelectedItem();
    CUIListBoxItem* AddTextItem(char const*);
    unsigned int GetSize();
    float GetItemHeight();
    void RemoveAll();
    void SetItemHeight(float);
    void SetSelectedIndex(unsigned int);
}

[cpp]
class FS_file_list
{
    void Free();
    unsigned int Size();
    char const* GetAt(unsigned int);
}

[cpp]
class CUICustomEdit : CUIWindow
{
    CUICustomEdit();
    void SetNextFocusCapturer(CUICustomEdit*);
    void CaptureFocus(bool);
    char const* GetText();
    void SetText(char const*);
}

[cpp]
class physics_joint
{
    void set_axis_dir_vs_second_element(float,float,float,int);
    void get_limits(float&,float&,int);
    float get_axis_angle(int);
    void set_anchor_vs_second_element(float,float,float);
    void set_max_force_and_velocity(float,float,int);
    bool is_breakable();
    void set_joint_spring_dumping_factors(float,float);
    void get_anchor(vector&);
    physics_element* get_first_element();
    void set_axis_dir_vs_first_element(float,float,float,int);
    void set_limits(float,float,int);
    void get_axis_dir(int,vector&);
    void set_anchor_vs_first_element(float,float,float);
    unsigned short get_axes_number();
    void set_axis_spring_dumping_factors(float,float,int);
    physics_element* get_stcond_element();
    void get_max_force_and_velocity(float&,float&,int);
    unsigned short get_bone_id();
    void set_axis_dir_global(float,float,float,int);
    void set_anchor_global(float,float,float);
}

[cpp]
class patrol
{
    const int continue = 1;
    const int custom = 3;
    const int dummy = -1;
    const int nearest = 2;
    const int next = 4;
    const int start = 0;
    const int stop = 0;
    bool flag(unsigned int,unsigned char);
    unsigned short game_vertex_id(unsigned int);
    vector point(unsigned int);
    unsigned int get_nearest(vector const&);
    bool terminal(unsigned int);
    flags32 flags(unsigned int);
    unsigned int index(char const*);
    patrol(char const*,enum EPatrolStartType,enum EPatrolRouteType,bool,unsigned int);
    unsigned int count();
    char const* name(unsigned int);
    unsigned int level_vertex_id(unsigned int);
}

[cpp]
class GameGraph__LEVEL_MAP__value_type
{
    class GameGraph::SLevel& level { get; }
    unsigned char id { get; }
}

[cpp]
class color_animator
{
    unsigned int length();
    void load(char const*);
    fcolor calculate(float);
    color_animator(char const*);
}

[cpp]
class CUIMapList : CUIWindow
{
    void StartDedicatedServer();
    CUIMapList();
    char const* GetCommandLine(char const*);
    bool IsEmpty();
    void SetServerParams(char const*);
    void SetModeSelector(CUIWindow*);
    void ClearList();
    void LoadMapList();
    void SetMapInfo(CUIMapInfo*);
    void SetMapPic(CUIStatic*);
    void OnModeChange();
    enum EGameIDs GetCurGameType();
    void SaveMapList();
    void SetWeatherSelector(CUIComboBox*);
}

[cpp]
class CWeaponSVU : CWeaponMagazined
{
    CWeaponSVU();
}

[cpp]
class rq_target
{
    const int rqtBoth = 3;
    const int rqtDyn = 13;
    const int rqtNone = 0;
    const int rqtObject = 1;
    const int rqtObstacle = 8;
    const int rqtShape = 4;
    const int rqtStatic = 2;
}

[cpp]
class CGameGraph
{
    class AssociativeVector<unsigned char,class GameGraph::SLevel,struct std::less<unsigned char> > const& levels();
    void accessible(unsigned int const&,bool);
    GameGraph__CVertex const* vertex(unsigned int);
    bool valid_vertex_id(unsigned int);
    unsigned short vertex_id(GameGraph__CVertex const*);
}

[cpp]
class CCat : CGameObject
{
    CCat();
}

[cpp]
class CElectricBall : CArtefact
{
    CElectricBall();
}

[cpp]
class world_property
{
    unsigned int const& condition();
    bool const& value();
    world_property(unsigned int,bool);
}

[cpp]
class ClientID
{
    operator==(ClientID);
    void set(unsigned int);
    ClientID();
    unsigned int value();
}

[cpp]
class cef_storage
{
    float evaluate(char const*,cse_alife_object*,cse_alife_object*,cse_alife_object*,cse_alife_object*);
}

[cpp]
class CUISpinNum : CUICustomSpin
{
    CUISpinNum();
}

[cpp]
class duality
{
    duality& set(float,float);
    float v { get; set; }
    float h { get; set; }
    duality(float,float);
}

[cpp]


[cpp]
class hit_memory_object : entity_memory_object
{
    float amount { get; }
    struct MemorySpace::CObjectParams<class CEntityAlive>& self_info { get; }
    unsigned int level_time { get; }
    unsigned int last_level_time { get; }
    vector& direction { get; }
    unsigned short bone_index { get; }
    struct MemorySpace::CObjectParams<class CEntityAlive>& object_info { get; }
}

[cpp]
class CGalantineArtefact : CArtefact
{
    CGalantineArtefact();
}

[cpp]
class CUIGameCustom : CDialogHolder
{
    void show_messages();
    void enable_fake_indicators(bool);
    game_object* CurrentItemAtCell();
    void update_fake_indicators(unsigned char,float);
    void hide_messages();
    void RemoveCustomStatic(char const*);
    void HidePdaMenu();
    void AddDialogToRender(CUIWindow*);
    void HideActorMenu();
    StaticDrawableWrapper* GetCustomStatic(char const*);
    void RemoveDialogToRender(CUIWindow*);
    void UpdateActorMenu();
    StaticDrawableWrapper* AddCustomStatic(char const*,bool,float);
}

[cpp]
class demo_player_info
{
    short const get_frags();
    unsigned short const get_artefacts();
    unsigned char const get_rank();
    short const get_deaths();
    unsigned char const get_team();
    char const* get_name();
    short const get_spots();
}

[cpp]
class cse_alife_smart_zone : cse_alife_space_restrictor, cse_alife_schedulable
{
    void on_unregister();
    cse_alife_smart_zone(char const*);
    bool can_switch_offline();
    void switch_online();
    cse_abstract* init();
    void update();
    bool interactive();
    float suitable(cse_alife_monster_abstract*);
    vector& position { get; set; }
    unsigned int m_story_id { get; }
    void switch_offline();
    float detect_probability();
    void STATE_Read(net_packet&,unsigned short);
    void on_register();
    unsigned short id { get; }
    bool keep_saved_data_anyway();
    unsigned short script_version { get; }
    void unregister_npc(cse_alife_monster_abstract*);
    bool enabled(cse_alife_monster_abstract*);
    bool can_switch_online();
    void STATE_Write(net_packet&);
    vector& angle { get; set; }
    void smart_touch(cse_alife_monster_abstract*);
    void on_spawn();
    bool used_ai_locations();
    CALifeSmartTerrainTask* task(cse_alife_monster_abstract*);
    unsigned short m_game_vertex_id { get; }
    bool can_save();
    unsigned short parent_id { get; }
    void on_before_register();
    bool online { get; }
    void register_npc(cse_alife_monster_abstract*);
    unsigned int m_level_vertex_id { get; }
}

[cpp]
class planner_action : action_planner, action_base
{
    unsigned short weight(world_state const&,world_state const&);
    void initialize();
    void setup(game_object*,property_storage*);
    property_storage& storage { get; }
    void show(char const*);
    void execute();
    void finalize();
    planner_action(game_object*,char const*);
    game_object* object { get; }
}

[cpp]
class CALifeHumanBrain : CALifeMonsterBrain
{
}

[cpp]
class net_packet
{
    void r_dir(vector&);
    void w_dir(vector const&);
    void w_float(float);
    void w_sdir(vector const&);
    net_packet();
    short r_s16();
    unsigned int r_u32();
    bool r_bool();
    unsigned short r_u16();
    float r_float();
    void w_float_q8(float,float,float);
    void w_angle16(float);
    void w_vec3(vector const&);
    void w_chunk_open8(unsigned int&);
    bool r_eof();
    void w_matrix(matrix&);
    void w_float_q16(float,float,float);
    void w_angle8(float);
    void w_u16(unsigned short);
    void w_chunk_close16(unsigned int);
    void r_seek(unsigned int);
    void w_stringZ(char const*);
    void r_advance(unsigned int);
    void r_matrix(matrix&);
    void w_s64(__int64);
    unsigned char r_u8();
    char const* r_stringZ();
    void r_sdir(vector&);
    void r_angle8(float&);
    void r_angle16(float&);
    unsigned int r_begin(unsigned short&);
    void w_chunk_close8(unsigned int);
    signed char r_s8();
    __int64 r_s64();
    int r_s32();
    unsigned int r_tell();
    void w_bool(bool);
    void w_chunk_open16(unsigned int&);
    void w_u8(unsigned char);
    unsigned int w_tell();
    unsigned __int64 r_u64();
    void w_s32(int);
    void w_begin(unsigned short);
    void r_vec3(vector&);
    void w_s16(short);
    ClientID r_clientID();
    void w_u64(unsigned __int64);
    unsigned int r_elapsed();
    void w_clientID(ClientID&);
    void w_u32(unsigned int);
}

[cpp]
class CBlend
{
}

[cpp]
class found_email_cb
{
    void bind(luabind::object,function<void>);
    void clear();
    found_email_cb(luabind::object,function<void>);
}

[cpp]
class COptionsManager
{
    void SaveValues(char const*);
    bool NeedSystemRestart();
    COptionsManager();
    void SendMessage2Group(char const*,char const*);
    void UndoGroup(char const*);
    bool NeedVidRestart();
    void OptionsPostAccept();
    void SetCurrentValues(char const*);
    void SaveBackupValues(char const*);
}

[cpp]
class CBlackGraviArtefact : CArtefact
{
    CBlackGraviArtefact();
}

[cpp]
class FactionState
{
    int bonus { get; set; }
    char const* war_state5 { get; set; }
    char const* faction_id { get; set; }
    float resource { get; set; }
    char const* target { get; set; }
    char const* war_state1 { get; set; }
    char const* war_state2 { get; set; }
    char const* war_state_hint4 { get; set; }
    char const* war_state_hint1 { get; set; }
    char const* icon { get; set; }
    float power { get; set; }
    int actor_goodwill { get; set; }
    char const* war_state3 { get; set; }
    char const* war_state_hint5 { get; set; }
    char const* war_state4 { get; set; }
    char const* icon_big { get; set; }
    char const* war_state_hint3 { get; set; }
    char const* war_state_hint2 { get; set; }
    char const* location { get; set; }
    char const* target_desc { get; set; }
    char const* name { get; set; }
    int member_count { get; set; }
}

[cpp]
class SoundInfo
{
    int danger { get; set; }
    vector& position { get; set; }
    float power { get; set; }
    int time { get; set; }
    game_object* who { get; set; }
}

[cpp]
class CUIButton : CUIStatic
{
    CUIButton();
    void Init(char const*,float,float,float,float);
}

[cpp]
class cse_alife_schedulable : ipure_schedulable_object
{
}

[cpp]
class profile
{
    char const* unique_nick();
    bool const online();
}

[cpp]
class CMainMenu : CDialogHolder
{
    char const* GetCDKey();
    login_manager* GetLoginMngr();
    account_manager* GetAccountMngr();
    demo_info const* GetDemoInfo(char const*);
    char const* GetGSVer();
    bool ValidateCDKey();
    Patch_Dawnload_Progress* GetPatchProgress();
    profile_store* GetProfileStore();
    char const* GetPlayerName();
    void CancelDownload();
}

[cpp]
class CMosquitoBald : CGameObject
{
    CMosquitoBald();
}

[cpp]
class particle
{
    void set_velocity(vector const&);
    void set_angles(vector const&);
    bool completed();
    particle(char const*,particle_params const&,bool);
    void set_bone(char const*);
    void set_particle(char const*,bool);
    void set_position(vector const&);
}

[cpp]
class cse_custom_zone : cse_alife_dynamic_object, cse_shape
{
    void on_unregister();
    cse_custom_zone(char const*);
    bool can_switch_offline();
    void switch_online();
    cse_abstract* init();
    unsigned int m_level_vertex_id { get; }
    vector& position { get; set; }
    unsigned int m_story_id { get; }
    void switch_offline();
    void STATE_Read(net_packet&,unsigned short);
    void on_register();
    unsigned short id { get; }
    bool keep_saved_data_anyway();
    unsigned short script_version { get; }
    bool can_switch_online();
    vector& angle { get; set; }
    unsigned short m_game_vertex_id { get; }
    void on_spawn();
    bool can_save();
    bool used_ai_locations();
    void STATE_Write(net_packet&);
    unsigned short parent_id { get; }
    void on_before_register();
    bool online { get; }
    bool interactive();
}

[cpp]
class CUILines
{
    void SetElipsis(bool);
    void SetTextST(char const*);
    void SetFont(CGameFont*);
    void SetText(char const*);
    char const* GetText();
    void SetTextColor(unsigned int);
}

[cpp]
class alife_simulator
{
    void teleport_object(unsigned short,unsigned short,unsigned int,vector const&);
    void remove_out_restriction(cse_alife_monster_abstract*,unsigned short);
    cse_abstract* create_ammo(char const*,vector const&,unsigned int,unsigned short,unsigned short,int);
    cse_alife_creature_actor* actor();
    void iterate_objects(function<bool>);
    void switch_distance(float);
    unsigned int level_id();
    void set_switch_distance(float);
    bool dont_has_info(unsigned short const&,char const*);
    cse_alife_dynamic_object* object(char const*);
    void set_switch_online(unsigned short,bool);
    char const* level_name(int);
    void add_in_restriction(cse_alife_monster_abstract*,unsigned short);
    void set_interactive(unsigned short,bool);
    void set_switch_offline(unsigned short,bool);
    void remove_all_restrictions(unsigned short,enum RestrictionSpace::ERestrictorTypes const&);
    void kill_entity(cse_alife_monster_abstract*);
    bool has_info(unsigned short const&,char const*);
    unsigned short spawn_id(unsigned int);
    bool valid_object_id(unsigned short);
    void add_out_restriction(cse_alife_monster_abstract*,unsigned short);
    void remove_in_restriction(cse_alife_monster_abstract*,unsigned short);
    void release(cse_abstract*,bool);
    cse_alife_dynamic_object* story_object(unsigned int);
    cse_abstract* create(char const*,vector const&,unsigned int,unsigned short);
}

[cpp]
class game_player_flags
{
    const int GAME_PLAYER_FLAG_LOCAL = 1;
    const int GAME_PLAYER_FLAG_READY = 2;
    const int GAME_PLAYER_FLAG_SCRIPT_BEGINS_FROM = 16;
    const int GAME_PLAYER_FLAG_SPECTATOR = 8;
    const int GAME_PLAYER_FLAG_VERY_VERY_DEAD = 4;
}

[cpp]
class cse_alife_object_physic : cse_alife_dynamic_object_visual, cse_ph_skeleton
{
    void on_unregister();
    bool can_switch_offline();
    void switch_online();
    cse_abstract* init();
    void set_yaw(float);
    unsigned int m_level_vertex_id { get; }
    vector& position { get; set; }
    unsigned int m_story_id { get; }
    void switch_offline();
    void STATE_Read(net_packet&,unsigned short);
    void on_register();
    unsigned short id { get; }
    bool keep_saved_data_anyway();
    unsigned short script_version { get; }
    bool can_switch_online();
    vector& angle { get; set; }
    unsigned short m_game_vertex_id { get; }
    void on_spawn();
    void STATE_Write(net_packet&);
    bool can_save();
    bool used_ai_locations();
    unsigned short parent_id { get; }
    void on_before_register();
    bool online { get; }
    bool interactive();
    cse_alife_object_physic(char const*);
}

[cpp]
class hanging_lamp : CGameObject
{
    void turn_on();
    void turn_off();
    hanging_lamp();
}

[cpp]
class CStalkerOutfit : CGameObject
{
    CStalkerOutfit();
}

[cpp]
class FileStatus
{
    bool Exists { get; }
    bool External { get; }
}

[cpp]
class cse_alife_psydog_phantom : cse_alife_monster_base
{
    void on_unregister();
    cse_alife_psydog_phantom(char const*);
    bool can_switch_offline();
    void switch_online();
    unsigned char group { get; set; }
    void update();
    bool interactive();
    unsigned char team { get; set; }
    unsigned short group_id { get; }
    unsigned int m_story_id { get; }
    cse_abstract* init();
    void switch_offline();
    unsigned int m_level_vertex_id { get; }
    void STATE_Read(net_packet&,unsigned short);
    void on_register();
    unsigned char g_group();
    void on_before_register();
    unsigned char g_squad();
    unsigned char squad { get; set; }
    unsigned short m_smart_terrain_id { get; set; }
    void STATE_Write(net_packet&);
    unsigned short m_game_vertex_id { get; }
    unsigned short id { get; }
    bool keep_saved_data_anyway();
    unsigned short script_version { get; }
    vector& position { get; set; }
    unsigned char g_team();
    bool can_switch_online();
    vector& angle { get; set; }
    void on_spawn();
    unsigned short parent_id { get; }
    bool can_save();
    bool online { get; }
    void on_death(cse_abstract*);
    bool used_ai_locations();
}

[cpp]
class SZoneMapEntityData
{
    vector& pos { get; set; }
    unsigned int color { get; set; }
    SZoneMapEntityData();
}

[cpp]
class CZombie : CGameObject
{
    CZombie();
}

[cpp]
class CUITabControl : CUIWindow
{
    void RemoveItem(char const*);
    CUITabButton* GetButtonByIndex(unsigned int);
    void SetNewActiveTab(unsigned int);
    bool AddItem(char const*,char const*,vector2,vector2);
    void RemoveAll();
    CUITabControl();
    int GetActiveIndex();
    unsigned int const GetTabsCount();
    void SetActiveTab(unsigned int);
    CUITabButton* GetButtonById(char const*);
    char const* GetActiveId();
}

[cpp]
class CWeaponGroza : CWeaponMagazinedWGrenade
{
    CWeaponGroza();
}

[cpp]
class move
{
    const int back = 4;
    const int criteria = 2;
    const int crouch = 0;
    const int curve = 0;
    const int curve_criteria = 2;
    const int default = 0;
    const int dodge = 1;
    const int down = 64;
    const int drag = 3;
    const int force = 1;
    const int fwd = 2;
    const int handbrake = 128;
    const int jump = 4;
    const int left = 8;
    const int line = 0;
    const int none = 1;
    const int off = 512;
    const int on = 256;
    const int right = 16;
    const int run = 1;
    const int run_fwd = 2;
    const int run_with_leader = 7;
    const int stand = 2;
    const int standing = 1;
    const int steal = 5;
    const int up = 32;
    const int walk = 0;
    const int walk_bkwd = 1;
    const int walk_fwd = 0;
    const int walk_with_leader = 6;
    void input(enum CScriptMovementAction::EInputKeys);
    void position(vector const&);
    void patrol(class CPatrolPath const*,class shared_str);
    move(enum MonsterSpace::EScriptMonsterMoveAction,game_object*,float,enum MonsterSpace::EScriptMonsterSpeedParam);
    void move(enum MonsterSpace::EMovementType);
    bool completed();
    void body(enum MonsterSpace::EBodyState);
    void object(game_object*);
    void path(enum DetailPathManager::EDetailPathType);
}

[cpp]
class cse_alife_group_abstract
{
}

[cpp]
class profile_timer
{
    void stop();
    operator string();
    profile_timer(profile_timer&);
    float time();
    void start();
}

[cpp]
class Patch_Dawnload_Progress
{
    char const* GetStatus();
    float GetProgress();
    char const* GetFlieName();
    bool GetInProgress();
}

[cpp]
class anim
{
    const int attack = 7;
    const int capture_prepare = 1;
    const int danger = 0;
    const int eat = 4;
    const int free = 1;
    const int lie_idle = 3;
    const int look_around = 8;
    const int panic = 2;
    const int rest = 6;
    const int sit_idle = 2;
    const int sleep = 5;
    const int stand_idle = 0;
    const int turn = 9;
    void type(enum MonsterSpace::EMentalState);
    bool completed();
    void anim(char const*);
    anim(enum MonsterSpace::EScriptMonsterAnimAction,int);
}

[cpp]
class game_cl_mp_script : game_cl_mp
{
    game_PlayerState* createPlayerState();
    bool CanBeReady();
    game_object* GetObjectByGameID(unsigned short);
    game_cl_mp_script();
    int round { get; }
    game_PlayerState* GetPlayerByOrderID(unsigned int);
    void TranslateGameMessage(unsigned int,net_packet&);
    void Init();
    char const* GetRoundTime();
    unsigned int start_time { get; }
    ClientID GetClientIDByOrderID(unsigned int);
    void CommonMessageOut(char const*);
    void EventSend(net_packet*);
    unsigned int GetPlayersCount();
    void FillMapEntities(ZoneMapEntities&);
    CUIGameCustom* createGameUI();
    bool OnKeyboardPress(int);
    void net_import_state(net_packet&);
    void shedule_Update(unsigned int);
    game_PlayerState* local_player { get; set; }
    game_PlayerState* GetLocalPlayer();
    bool OnKeyboardRelease(int);
    enum EGameIDs& type { get; set; }
    ClientID& local_svdpnid { get; set; }
    void EventGen(net_packet*,unsigned short,unsigned short);
    void GameEventGen(net_packet*,unsigned short);
}

[cpp]
class rq_result
{
    game_object* object { get; }
    int element { get; }
    float range { get; }
    rq_result();
}

[cpp]
class reader
{
    void r_vec3(vector*);
    float r_float_q16(float,float);
    void r_advance(unsigned __int64);
    void r_sdir(vector&);
    void r_seek(unsigned __int64);
    short r_s16();
    float r_angle8();
    float r_float_q8(float,float);
    unsigned int r_u32();
    bool r_bool();
    float r_angle16();
    unsigned __int64 r_tell();
    bool r_eof();
    unsigned __int64 r_u64();
    signed char r_s8();
    void r_dir(vector&);
    __int64 r_s64();
    float r_float();
    int r_s32();
    unsigned short r_u16();
    __int64 r_elapsed();
    unsigned char r_u8();
    char const* r_stringZ();
}

[cpp]
class login_manager
{
    void logout();
    void stop_login();
    void forgot_password(char const*);
    void login(char const*,char const*,char const*,login_operation_cb);
    void save_nick_to_registry(char const*);
    char const* get_email_from_registry();
    void save_email_to_registry(char const*);
    void save_remember_me_to_registry(bool);
    bool get_remember_me_from_registry();
    void save_password_to_registry(char const*);
    char const* get_nick_from_registry();
    char const* get_password_from_registry();
    void login_offline(char const*,login_operation_cb);
    profile const* get_current_profile();
    void stop_setting_unique_nick();
    void set_unique_nick(char const*,login_operation_cb);
}

[cpp]
class login_operation_cb
{
    void bind(luabind::object,function<void>);
    void clear();
    login_operation_cb(luabind::object,function<void>);
}

[cpp]
class CThornArtefact : CArtefact
{
    CThornArtefact();
}

[cpp]
class CPhraseScript
{
    void AddAction(char const*);
    void AddGiveInfo(char const*);
    void AddDontHasInfo(char const*);
    void SetScriptText(char const*);
    void AddDisableInfo(char const*);
    void AddPrecondition(char const*);
    void AddHasInfo(char const*);
}

[cpp]
class CBurer : CGameObject
{
    CBurer();
}

[cpp]
class CAntirad : CGameObject
{
    CAntirad();
}

[cpp]
class CFoodItem : CGameObject
{
    CFoodItem();
}

[cpp]
class CWeaponHPSA : CWeaponMagazined
{
    CWeaponHPSA();
}

[cpp]
class phcondition_callonstep
{
    void set_global_time_ms(unsigned int);
    void set_time_interval_ms(unsigned int);
    void set_step(unsigned __int64);
    void set_global_time_s(float);
    void set_time_interval_s(float);
    void set_steps_interval(unsigned __int64);
    phcondition_callonstep();
}

[cpp]
class CZudaArtefact : CArtefact
{
    CZudaArtefact();
}

[cpp]
class act
{
    const int attack = 2;
    const int eat = 1;
    const int panic = 3;
    const int rest = 0;
    act(enum MonsterSpace::EScriptMonsterGlobalAction,game_object*);
}

[cpp]
class award_pair_t
{
    award_data& second { get; }
    enum gamespy_profile::enum_awards_t& first { get; }
}

[cpp]
class CUICustomSpin : CUIWindow
{
    CUICustomSpin();
    void Init(float,float,float,float);
    char const* GetText();
}


[cpp]
class particle_params
{
    particle_params(vector const&,vector const&,vector const&);
}

[cpp]
class physics_element
{
    float get_mass();
    void release_fixed();
    void get_linear_vel(vector&);
    matrix global_transform();
    bool is_fixed();
    bool is_breakable();
    void apply_force(float,float,float);
    void get_angular_vel(vector&);
    void fix();
    float get_density();
    float get_volume();
}

[cpp]
class cse_alife_level_changer : cse_alife_space_restrictor
{
    void on_unregister();
    cse_alife_level_changer(char const*);
    bool can_switch_offline();
    void switch_online();
    cse_abstract* init();
    unsigned int m_level_vertex_id { get; }
    vector& position { get; set; }
    unsigned int m_story_id { get; }
    void switch_offline();
    void STATE_Read(net_packet&,unsigned short);
    void on_register();
    unsigned short id { get; }
    bool keep_saved_data_anyway();
    unsigned short script_version { get; }
    bool can_switch_online();
    vector& angle { get; set; }
    unsigned short m_game_vertex_id { get; }
    void on_spawn();
    bool can_save();
    bool used_ai_locations();
    void STATE_Write(net_packet&);
    unsigned short parent_id { get; }
    void on_before_register();
    bool online { get; }
    bool interactive();
}

[cpp]
class account_manager
{
    void stop_searching_email();
    class std::vector<char const * __ptr64,class xalloc<char const * __ptr64> > const& get_suggested_unicks();
    void delete_profile(account_operation_cb);
    void create_profile(char const*,char const*,char const*,char const*,account_operation_cb);
    bool is_get_account_profiles_active();
    void suggest_unique_nicks(char const*,suggest_nicks_cb);
    bool verify_email(char const*);
    bool verify_password(char const*);
    void stop_suggest_unique_nicks();
    bool is_email_searching_active();
    void stop_fetching_account_profiles();
    void get_account_profiles(char const*,char const*,account_profiles_cb);
    char const* get_verify_error_descr();
    bool verify_unique_nick(char const*);
    class std::vector<char const * __ptr64,class xalloc<char const * __ptr64> > const& get_found_profiles();
    void search_for_email(char const*,found_email_cb);
}

[cpp]
class game_cl_GameState : game_GameState
{
    game_cl_GameState();
    game_PlayerState* local_player { get; set; }
    int round { get; }
    enum EGameIDs& type { get; set; }
    ClientID& local_svdpnid { get; set; }
    unsigned int start_time { get; }
}

[cpp]

[cpp]
class game_phases
{
    const int GAME_PHASE_INPROGRESS = 1;
    const int GAME_PHASE_NONE = 0;
    const int GAME_PHASE_PENDING = 2;
    const int GAME_PHASE_SCRIPT_BEGINS_FROM = 9;
    const int GAME_PHASE_TEAM1_SCORES = 3;
    const int GAME_PHASE_TEAM2_SCORES = 4;
    const int GAME_PHASE_TEAMS_IN_A_DRAW = 7;
}

[cpp]
class account_profiles_cb
{
    void bind(luabind::object,function<void>);
    void clear();
    account_profiles_cb(luabind::object,function<void>);
}

[cpp]
class cse_alife_item_bolt : cse_alife_item
{
    void on_unregister();
    cse_alife_item_bolt(char const*);
    bool can_switch_offline();
    void switch_online();
    cse_abstract* init();
    bool interactive();
    vector& position { get; set; }
    unsigned int m_story_id { get; }
    void switch_offline();
    void STATE_Read(net_packet&,unsigned short);
    void on_register();
    unsigned short id { get; }
    bool keep_saved_data_anyway();
    unsigned short script_version { get; }
    bool can_switch_online();
    vector& angle { get; set; }
    void on_spawn();
    unsigned short m_game_vertex_id { get; }
    void STATE_Write(net_packet&);
    bool can_save();
    bool used_ai_locations();
    bool bfUseful();
    unsigned short parent_id { get; }
    void on_before_register();
    bool online { get; }
    unsigned int m_level_vertex_id { get; }
}

[cpp]
class game_sv_Deathmatch : game_sv_GameState
{
    game_sv_Deathmatch();
    int round { get; }
    struct TeamStruct* GetTeamData(unsigned int);
    char const* type_name();
    unsigned int start_time { get; }
    enum EGameIDs& type { get; set; }
}

[cpp]
class particles_object
{
    void stop();
    void stop_deferred();
    void pause_path(bool);
    void stop_path();
    void set_orientation(float,float,float);
    bool looped();
    void stop_deffered();
    particles_object(char const*);
    void play_at_pos(vector const&);
    void load_path(char const*);
    vector last_position();
    void start_path(bool);
    bool playing();
    void play();
    void move_to(vector const&,vector const&);
    void set_direction(vector const&);
}

[cpp]
class CWeaponVintorez : CWeaponMagazined
{
    CWeaponVintorez();
}

[cpp]
class CArtefact : CGameObject
{
    unsigned char GetAfRank();
    CArtefact();
    void FollowByPath(char const*,int,vector);
    void SwitchVisibility(bool);
}

[cpp]
class CAI_Dog : CGameObject
{
    CAI_Dog();
}

[cpp]
class CWeapon : CGameObject
{
    CWeapon();
    bool can_kill();
}

[cpp]
class effector
{
    bool process(effector_params*);
    void finish();
    void start();
    effector(int,float);
}

[cpp]
class CServerList : CUIWindow
{
    const int ece_unique_nick_expired = 2;
    const int ece_unique_nick_not_registred = 1;
    void ShowServerInfo();
    CServerList();
    void SetSortFunc(char const*,bool);
    void ConnectToSelected();
    void SetPlayerName(char const*);
    void RefreshQuick();
    void SetConnectionErrCb(connect_error_cb);
    void RefreshList(bool);
    void NetRadioChanged(bool);
    void SetFilters(SServerFilters&);
}

[cpp]
class CWeaponFN2000 : CWeaponMagazined
{
    CWeaponFN2000();
}

[cpp]
class phcondition_expireonstep : phcondition_callonstep
{
    phcondition_expireonstep();
}

[cpp]
class color
{
    float b { get; set; }
    color& set(float,float,float);
    float r { get; set; }
    float g { get; set; }
    color(float,float,float);
}

[cpp]
class cse_alife_monster_abstract : cse_alife_creature_abstract, cse_alife_schedulable
{
    void on_unregister();
    int rank();
    void current_level_travel_speed(float);
    cse_alife_monster_abstract(char const*);
    bool can_switch_offline();
    void switch_online();
    unsigned char team { get; set; }
    cse_abstract* init();
    void update();
    bool interactive();
    unsigned int m_level_vertex_id { get; }
    unsigned short group_id { get; }
    unsigned int m_story_id { get; }
    void on_death(cse_abstract*);
    void switch_offline();
    unsigned char group { get; set; }
    void smart_terrain_task_activate();
    void on_before_register();
    void on_register();
    void STATE_Write(net_packet&);
    bool used_ai_locations();
    unsigned char g_squad();
    unsigned char squad { get; set; }
    unsigned short m_smart_terrain_id { get; set; }
    unsigned short m_game_vertex_id { get; }
    unsigned short smart_terrain_id();
    unsigned short id { get; }
    bool keep_saved_data_anyway();
    unsigned short script_version { get; }
    void travel_speed(float);
    unsigned char g_team();
    bool can_switch_online();
    vector& position { get; set; }
    vector& angle { get; set; }
    void smart_terrain_task_deactivate();
    void on_spawn();
    CALifeMonsterBrain* brain();
    bool has_detector();
    void force_set_goodwill(int,unsigned short);
    void kill();
    void clear_smart_terrain();
    unsigned short parent_id { get; }
    bool can_save();
    bool online { get; }
    void STATE_Read(net_packet&,unsigned short);
    unsigned char g_group();
}

[cpp]
class CMincer : CGameObject
{
    CMincer();
}

[cpp]
class CScope : CGameObject
{
    CScope();
}

[cpp]
class CUIMessageBoxEx : CUIDialogWnd
{
    CUIMessageBoxEx();
    bool Init(char const*);
    char const* GetPassword();
    void SetText(char const*);
    char const* GetHost();
    bool InitMessageBox(char const*);
}

[cpp]


[cpp]
class cse_alife_mounted_weapon : cse_alife_dynamic_object_visual
{
    void on_unregister();
    cse_alife_mounted_weapon(char const*);
    bool can_switch_offline();
    void switch_online();
    cse_abstract* init();
    unsigned int m_level_vertex_id { get; }
    vector& position { get; set; }
    unsigned int m_story_id { get; }
    void switch_offline();
    void STATE_Read(net_packet&,unsigned short);
    void on_register();
    unsigned short id { get; }
    bool keep_saved_data_anyway();
    unsigned short script_version { get; }
    bool can_switch_online();
    vector& angle { get; set; }
    unsigned short m_game_vertex_id { get; }
    void on_spawn();
    bool can_save();
    bool used_ai_locations();
    void STATE_Write(net_packet&);
    unsigned short parent_id { get; }
    void on_before_register();
    bool online { get; }
    bool interactive();
}

[cpp]
class cse_alife_car : cse_alife_dynamic_object_visual, cse_ph_skeleton
{
    void on_unregister();
    cse_alife_car(char const*);
    bool can_switch_offline();
    void switch_online();
    cse_abstract* init();
    unsigned int m_level_vertex_id { get; }
    vector& position { get; set; }
    unsigned int m_story_id { get; }
    void switch_offline();
    void STATE_Read(net_packet&,unsigned short);
    void on_register();
    unsigned short id { get; }
    bool keep_saved_data_anyway();
    unsigned short script_version { get; }
    bool can_switch_online();
    vector& angle { get; set; }
    unsigned short m_game_vertex_id { get; }
    void on_spawn();
    bool can_save();
    bool used_ai_locations();
    void STATE_Write(net_packet&);
    unsigned short parent_id { get; }
    void on_before_register();
    bool online { get; }
    bool interactive();
}

[cpp]
class CAI_Crow : CGameObject
{
    CAI_Crow();
}

[cpp]
class cse_alife_space_restrictor : cse_alife_dynamic_object, cse_shape
{
    void on_unregister();
    cse_alife_space_restrictor(char const*);
    bool can_switch_offline();
    void switch_online();
    cse_abstract* init();
    unsigned int m_level_vertex_id { get; }
    vector& position { get; set; }
    unsigned int m_story_id { get; }
    void switch_offline();
    void STATE_Read(net_packet&,unsigned short);
    void on_register();
    unsigned short id { get; }
    bool keep_saved_data_anyway();
    unsigned short script_version { get; }
    bool can_switch_online();
    vector& angle { get; set; }
    unsigned short m_game_vertex_id { get; }
    void on_spawn();
    bool can_save();
    bool used_ai_locations();
    void STATE_Write(net_packet&);
    unsigned short parent_id { get; }
    void on_before_register();
    bool online { get; }
    bool interactive();
}

[cpp]
class cse_alife_item_weapon_magazined_w_gl : cse_alife_item_weapon_magazined
{
    void on_unregister();
    cse_alife_item_weapon_magazined_w_gl(char const*);
    bool can_switch_offline();
    void switch_online();
    cse_abstract* init();
    unsigned int m_level_vertex_id { get; }
    vector& position { get; set; }
    unsigned int m_story_id { get; }
    void switch_offline();
    void STATE_Read(net_packet&,unsigned short);
    void on_register();
    unsigned short id { get; }
    bool keep_saved_data_anyway();
    unsigned short script_version { get; }
    bool can_switch_online();
    vector& angle { get; set; }
    void on_spawn();
    unsigned short m_game_vertex_id { get; }
    void STATE_Write(net_packet&);
    bool used_ai_locations();
    bool can_save();
    bool bfUseful();
    unsigned short parent_id { get; }
    void on_before_register();
    bool online { get; }
    bool interactive();
}

[cpp]
class client_spawn_manager
{
    void remove(unsigned short,unsigned short);
    void add(unsigned short,unsigned short,function<void> const&);
}

[cpp]
class CSavedGameWrapper
{
    float const& actor_health();
    CTime game_time();
    unsigned char const& level_id();
    char const* level_name();
    CSavedGameWrapper(char const*);
}

[cpp]
class cover_point
{
    bool is_smart_cover();
    vector const& position();
    unsigned int level_vertex_id();
}

[cpp]
class CUIScrollView : CUIWindow
{
    CUIScrollView();
    void RemoveWindow(CUIWindow*);
    int GetMinScrollPos();
    void AddWindow(CUIWindow*,bool);
    void Clear();
    void ScrollToEnd();
    void ScrollToBegin();
    int GetCurrentScrollPos();
    void SetFixedScrollBar(bool);
    int GetMaxScrollPos();
    void SetScrollPos(int);
}

[cpp]
class CWeaponBM16 : CWeaponShotgun
{
    CWeaponBM16();
}

[cpp]
class cse_smart_cover : cse_alife_dynamic_object
{
    void on_unregister();
    cse_smart_cover(char const*);
    bool can_switch_offline();
    void switch_online();
    cse_abstract* init();
    char const* description();
    vector& position { get; set; }
    unsigned int m_story_id { get; }
    void switch_offline();
    void STATE_Read(net_packet&,unsigned short);
    void on_register();
    unsigned short id { get; }
    bool keep_saved_data_anyway();
    unsigned short script_version { get; }
    bool can_switch_online();
    vector& angle { get; set; }
    void on_spawn();
    unsigned short m_game_vertex_id { get; }
    void set_available_loopholes(luabind::object);
    bool can_save();
    bool used_ai_locations();
    void STATE_Write(net_packet&);
    unsigned short parent_id { get; }
    void on_before_register();
    bool online { get; }
    bool interactive();
    unsigned int m_level_vertex_id { get; }
}

[cpp]
class CGraviArtefact : CArtefact
{
    CGraviArtefact();
}

[cpp]
class game_sv_mp : game_sv_GameState
{
    game_sv_mp();
    void signal_Syncronize();
    void KillPlayer(ClientID,unsigned short);
    int round { get; }
    enum EGameIDs& type { get; set; }
    void SendPlayerKilledMessage(unsigned short,enum KILL_TYPE,unsigned short,unsigned short,enum SPECIAL_KILL_TYPE);
    unsigned int start_time { get; }
}

[cpp]
class iserializable
{
}

[cpp]
class matrix
{
    vector& i { get; set; }
    vector& c { get; set; }
    matrix();
    vector& k { get; set; }
    float _44_ { get; set; }
    vector& j { get; set; }
    float _24_ { get; set; }
    matrix& setXYZ(float,float,float);
    matrix& identity();
    float _34_ { get; set; }
    matrix& set(vector const&,vector const&,vector const&,vector const&);
    matrix& setXYZi(float,float,float);
    matrix& mk_xform(struct _quaternion<float> const&,vector const&);
    matrix& mul(float);
    float _14_ { get; set; }
    matrix& div(float);
    void getHPB(float*,float*,float*);
    matrix& setHPB(float,float,float);
}

[cpp]
class cse_alife_object_hanging_lamp : cse_alife_dynamic_object_visual, cse_ph_skeleton
{
    void on_unregister();
    cse_alife_object_hanging_lamp(char const*);
    bool can_switch_offline();
    void switch_online();
    cse_abstract* init();
    unsigned int m_level_vertex_id { get; }
    vector& position { get; set; }
    unsigned int m_story_id { get; }
    void switch_offline();
    void STATE_Read(net_packet&,unsigned short);
    void on_register();
    unsigned short id { get; }
    bool keep_saved_data_anyway();
    unsigned short script_version { get; }
    bool can_switch_online();
    vector& angle { get; set; }
    unsigned short m_game_vertex_id { get; }
    void on_spawn();
    bool can_save();
    bool used_ai_locations();
    void STATE_Write(net_packet&);
    unsigned short parent_id { get; }
    void on_before_register();
    bool online { get; }
    bool interactive();
}

[cpp]
class CPseudoGigant : CGameObject
{
    CPseudoGigant();
}

[cpp]
class property_storage
{
    void set_property(unsigned int const&,bool const&);
    bool const& property(unsigned int const&);
    property_storage();
}

[cpp]
class ray_pick
{
    int get_element();
    void set_range(float);
    void set_position(vector&);
    float get_distance();
    game_object* get_object();
    void set_direction(vector&);
    ray_pick(vector&,vector&,float,enum collide::rq_target,game_object*);
    bool query();
    void set_ignore_object(game_object*);
    void set_flags(enum collide::rq_target);
    rq_result get_result();
}

[cpp]
class CDummyArtefact : CArtefact
{
    CDummyArtefact();
}

[cpp]
class connect_error_cb
{
    void bind(luabind::object,function<void>);
    void clear();
    connect_error_cb(luabind::object,function<void>);
}

[cpp]
class CSilencer : CGameObject
{
    CSilencer();
}

[cpp]
class spawn_story_ids
{
    const int INVALID_SPAWN_STORY_ID = -1;
}

[cpp]
class IRenderable
{
}

[cpp]
class cse_alife_item_weapon_shotgun : cse_alife_item_weapon
{
    void on_unregister();
    bool can_switch_offline();
    void switch_online();
    cse_abstract* init();
    bool interactive();
    vector& position { get; set; }
    unsigned int m_story_id { get; }
    void switch_offline();
    void STATE_Read(net_packet&,unsigned short);
    void on_register();
    unsigned short id { get; }
    bool keep_saved_data_anyway();
    unsigned short script_version { get; }
    bool can_switch_online();
    vector& angle { get; set; }
    unsigned short m_game_vertex_id { get; }
    void on_spawn();
    unsigned int m_level_vertex_id { get; }
    bool used_ai_locations();
    bool can_save();
    bool bfUseful();
    unsigned short parent_id { get; }
    void on_before_register();
    bool online { get; }
    void STATE_Write(net_packet&);
    cse_alife_item_weapon_shotgun(char const*);
}

[cpp]
class physics_shell
{
    physics_joint* get_joint_by_bone_name(char const*);
    physics_element* get_element_by_bone_id(unsigned short);
    physics_joint* get_joint_by_bone_id(unsigned short);
    physics_element* get_element_by_bone_name(char const*);
    physics_joint* get_joint_by_order(unsigned short);
    void block_breaking();
    void get_linear_vel(vector&);
    bool is_breakable();
    bool is_breaking_blocked();
    void apply_force(float,float,float);
    void unblock_breaking();
    void get_angular_vel(vector&);
    unsigned short get_joints_number();
    unsigned short get_elements_number();
    physics_element* get_element_by_order(unsigned short);
}

[cpp]
class snd_type
{
    const int ambient = 128;
    const int anomaly = 268435456;
    const int anomaly_idle = 268437504;
    const int attack = 8192;
    const int bullet_hit = 524288;
    const int die = 131072;
    const int drop = 33554432;
    const int eat = 4096;
    const int empty = 1048576;
    const int hide = 16777216;
    const int idle = 2048;
    const int injure = 65536;
    const int item = 1073741824;
    const int item_drop = 1107296256;
    const int item_hide = 1090519040;
    const int item_pick_up = 1140850688;
    const int item_take = 1082130432;
    const int item_use = 1077936128;
    const int monster = 536870912;
    const int monster_attack = 536879104;
    const int monster_die = 537001984;
    const int monster_eat = 536875008;
    const int monster_injure = 536936448;
    const int monster_step = 536903680;
    const int monster_talk = 536887296;
    const int no_sound = 0;
    const int object_break = 1024;
    const int object_collide = 512;
    const int object_explode = 256;
    const int pick_up = 67108864;
    const int reload = 262144;
    const int shoot = 2097152;
    const int step = 32768;
    const int take = 8388608;
    const int talk = 16384;
    const int use = 4194304;
    const int weapon = -2147483648;
    const int weapon_bullet_hit = -2146959360;
    const int weapon_empty = -2146435072;
    const int weapon_reload = -2147221504;
    const int weapon_shoot = -2145386496;
    const int world = 134217728;
    const int world_ambient = 134217856;
    const int world_object_break = 134218752;
    const int world_object_collide = 134218240;
    const int world_object_explode = 134217984;
}

[cpp]
class CExplosiveItem : CGameObject, explosive
{
    CExplosiveItem();
}

[cpp]
class object_binder
{
    game_object* object { get; }
    void net_destroy();
    void reinit();
    bool net_save_relevant();
    void net_export(net_packet*);
    object_binder(game_object*);
    void net_Relcase(game_object*);
    void load(reader*);
    void reload(char const*);
    void save(net_packet*);
    bool net_spawn(cse_alife_object*);
    void update(unsigned int);
    void net_import(net_packet*);
}

[cpp]
class CWeaponLR300 : CWeaponMagazined
{
    CWeaponLR300();
}

[cpp]
class memory_info : visible_memory_object
{
    struct MemorySpace::CObjectParams<class CGameObject>& self_info { get; }
    bool hit_info { get; }
    bool visual_info { get; }
    unsigned int last_level_time { get; }
    bool sound_info { get; }
    struct MemorySpace::CObjectParams<class CGameObject>& object_info { get; }
    unsigned int level_time { get; }
}

[cpp]


[cpp]
class CHairsZone : CGameObject
{
    CHairsZone();
}

[cpp]


[cpp]
class object_params
{
    unsigned int level_vertex { get; }
    vector& position { get; }
}

[cpp]
class effector_params
{
    noise& noise { get; set; }
    float gray { get; set; }
    color& color_gray { get; set; }
    effector_params();
    color& color_add { get; set; }
    float blur { get; set; }
    duality& dual { get; set; }
    color& color_base { get; set; }
    void assign(effector_params*);
}

[cpp]
class CUIMessageBox : CUIStatic
{
    CUIMessageBox();
    bool Init(char const*);
    char const* GetPassword();
    void SetText(char const*);
    char const* GetHost();
    bool InitMessageBox(char const*);
}

[cpp]
class CWeaponAutomaticShotgun : CWeaponMagazined
{
    CWeaponAutomaticShotgun();
}

[cpp]
class SServerFilters
{
    bool full { get; set; }
    bool with_pass { get; set; }
    bool empty { get; set; }
    bool without_pass { get; set; }
    bool listen_servers { get; set; }
    bool without_ff { get; set; }
    SServerFilters();
}

[cpp]
class demo_info
{
    demo_player_info const* get_player(unsigned int);
    char const* get_game_type();
    unsigned int const get_players_count();
    char const* get_map_version();
    char const* get_map_name();
    char const* get_author_name();
    char const* get_game_score();
}

[cpp]
class profile_store
{
    const int at_award_massacre = 0;
    const int at_awards_count = 30;
    const int bst_backstabs_in_row = 2;
    const int bst_bleed_kills_in_row = 2;
    const int bst_explosive_kills_in_row = 3;
    const int bst_eye_kills_in_row = 4;
    const int bst_head_shots_in_row = 3;
    const int bst_kills_in_row = 0;
    const int bst_kinife_kills_in_row = 1;
    const int bst_score_types_count = 7;
    void load_current_profile(store_operation_cb,store_operation_cb);
    void stop_loading();
    class AssociativeVector<enum gamespy_profile::enum_best_score_type,int,struct std::less<enum gamespy_profile::enum_best_score_type> > const& get_best_scores();
    class AssociativeVector<enum gamespy_profile::enum_awards_t,struct gamespy_profile::award_data,struct std::less<enum gamespy_profile::enum_awards_t> > const& get_awards();
}

[cpp]
class CWeaponMagazined : CWeapon
{
    CWeaponMagazined();
}

[cpp]
class sound_memory_object : game_memory_object
{
    struct MemorySpace::CObjectParams<class CGameObject>& self_info { get; }
    unsigned int level_time { get; }
    float power { get; }
    int type();
    struct MemorySpace::CObjectParams<class CGameObject>& object_info { get; }
    unsigned int last_level_time { get; }
}

[cpp]
class CWeaponKnife : CWeapon
{
    CWeaponKnife();
}

[cpp]
class cse_zone_visual : cse_anomalous_zone, cse_visual
{
    void on_unregister();
    cse_zone_visual(char const*);
    bool can_switch_offline();
    void switch_online();
    cse_abstract* init();
    unsigned int m_level_vertex_id { get; }
    vector& position { get; set; }
    unsigned int m_story_id { get; }
    void switch_offline();
    void STATE_Read(net_packet&,unsigned short);
    void on_register();
    unsigned short id { get; }
    bool keep_saved_data_anyway();
    unsigned short script_version { get; }
    bool can_switch_online();
    vector& angle { get; set; }
    unsigned short m_game_vertex_id { get; }
    void on_spawn();
    bool can_save();
    bool used_ai_locations();
    void STATE_Write(net_packet&);
    unsigned short parent_id { get; }
    void on_before_register();
    bool online { get; }
    bool interactive();
}

[cpp]
class store_operation_cb
{
    void bind(luabind::object,function<void>);
    void clear();
    store_operation_cb(luabind::object,function<void>);
}

[cpp]
class IRender_Visual
{
    IKinematicsAnimated* dcast_PKinematicsAnimated();
}

[cpp]
class world_state
{
    bool includes(world_state const&);
    world_property const* property(unsigned int const&);
    void remove_property(unsigned int const&);
    void add_property(world_property const&);
    void clear();
    world_state(world_state);
}
namespace level
{
    void remove_call(luabind::object const&,char const*,char const*);
    Fbox get_bounding_volume();
    void set_time_factor(float);
    float get_wfx_time();
    void hide_indicators();
    void spawn_phantom(vector const&);
    unsigned int get_time_days();
    void start_stop_menu(CUIDialogWnd*,bool);
    void remove_calls_for_object(luabind::object const&);
    void spawn_item(char const*,vector,unsigned int,unsigned short,bool);
    unsigned int get_time_minutes();
    void change_game_time(unsigned int,unsigned int,unsigned int);
    bool start_weather_fx_from_time(char const*,float);
    unsigned int vertex_in_direction(unsigned int,vector,float);
    void map_add_object_spot_ser(unsigned short,char const*,char const*);
    void add_call(luabind::object const&,char const*,char const*);
    void iterate_sounds(char const*,unsigned int,luabind::object,function<void>);
    void remove_dialog_to_render(CUIDialogWnd*);
    float rain_factor();
    void add_dialog_to_render(CUIDialogWnd*);
    void stop_weather_fx();
    unsigned short map_has_object_spot(unsigned short,char const*);
    game_object* debug_object(char const*);
    void show_indicators();
    void map_change_spot_hint(unsigned short,char const*,char const*);
    bool ray_pick(vector const&,vector const&,float,enum collide::rq_target,rq_result&,game_object*);
    void set_pp_effector_factor(int,float);
    physics_world* physics_world();
    float get_time_factor();
    void set_snd_volume(float);
    float low_cover_in_direction(unsigned int,vector const&);
    unsigned int game_id();
    client_spawn_manager& client_spawn_manager();
    unsigned char get_active_cam();
    class CEnvironment* environment();
    void remove_cam_effector(int);
    void remove_pp_effector(int);
    float get_target_dist();
    game_object* debug_actor();
    char const* name();
    vector vertex_position(unsigned int);
    void enable_input();
    void set_weather(char const*,bool);
    unsigned int get_time_hours();
    void add_cam_effector2(char const*,int,bool,char const*);
    bool set_weather_fx(char const*);
    void prefetch_sound(char const*);
    void show_weapon(bool);
    bool is_wfx_playing();
    game_object* get_target_obj();
    void disable_input();
    void map_add_object_spot(unsigned short,char const*,char const*);
    void add_pp_effector(char const*,int,bool);
    char const* get_weather();
    bool present();
    float add_cam_effector(char const*,int,bool,char const*);
    bool patrol_path_exists(char const*);
    void map_remove_object_spot(unsigned short,char const*);
    unsigned int get_target_element();
    float high_cover_in_direction(unsigned int,vector const&);
    CUIDialogWnd* main_input_receiver();
    void hide_indicators_safe();
    float get_snd_volume();
    void remove_complex_effector(int);
    game_object* object_by_id(unsigned short);
    void send(net_packet&,bool,bool,bool,bool);
    void iterate_online_objects(function<bool>);
}
namespace game
{
    char const* translate_string(char const*);
    bool has_active_tutorial();
    unsigned int time();
    void stop_tutorial();
    CTime get_game_time();
    void start_tutorial(char const*);

    [cpp]
    class CTime
    {
        const int DateToDay = 0;
        const int DateToMonth = 1;
        const int DateToYear = 2;
        const int TimeToHours = 0;
        const int TimeToMilisecs = 3;
        const int TimeToMinutes = 1;
        const int TimeToSeconds = 2;
        float diffSec(CTime*);
        operator-(CTime);
        void add(CTime*);
        void set(int,int,int,int,int,int,int);
        void setHMS(int,int,int);
        char const* timeToString(int);
        void setHMSms(int,int,int,int);
        operator+(CTime);
        CTime(CTime const&);
        char const* dateToString(int);
        void sub(CTime*);
        void get(unsigned int&,unsigned int&,unsigned int&,unsigned int&,unsigned int&,unsigned int&,unsigned int&);
    }

    [cpp]
    class game_sv_GameState : game_GameState
    {
        RPoint getRP(unsigned short,unsigned int);
        void u_EventSend(net_packet&,unsigned int);
        game_PlayerState* get_id(ClientID);
        game_sv_GameState();
        int round { get; }
        unsigned int get_players_count();
        void GenerateGameMessage(net_packet&);
        char [64]& get_option_s(char const*,char const*,char const*);
        char const* get_player_name_id(ClientID);
        int get_option_i(char const*,char const*,int);
        unsigned int start_time { get; }
        unsigned int getRPcount(unsigned short);
        char const* get_name_id(ClientID);
        enum EGameIDs& type { get; set; }
        unsigned short get_id_2_eid(ClientID);
        game_PlayerState* get_eid(unsigned short);
    }
}
namespace relation_registry
{
    void set_community_relation(char const*,char const*,int);
    int get_general_goodwill_between(unsigned short,unsigned short);
    void change_community_goodwill(char const*,int,int);
    int community_goodwill(char const*,int);
    int community_relation(char const*,char const*);
    void set_community_goodwill(char const*,int,int);
}
namespace actor_stats
{
    void add_points_str(char const*,char const*,char const*);
    void add_points(char const*,char const*,int,int);
    int get_points(char const*);
}

[cpp]
class game_PlayerState
{
    void setFlag(unsigned short);
    game_PlayerState();
    bool testFlag(unsigned short);
    unsigned char team { get; set; }
    short money_delta { get; set; }
    unsigned short GameID { get; set; }
    char const* getName();
    void net_Import(net_packet&);
    short deaths { get; set; }
    int money_for_round { get; set; }
    void net_Export(net_packet&,int);
    unsigned short ping { get; set; }
    unsigned int RespawnTime { get; set; }
    short kills { get; set; }
    void resetFlag(unsigned short);
    unsigned short lasthitter { get; set; }
    void setName(char const*);
    signed char skin { get; set; }
    unsigned short flags { get; set; }
    class std::vector<unsigned short,class xalloc<unsigned short> >& pItemList { get; set; }
    unsigned short lasthitweapon { get; set; }
    void clear();
    int LastBuyAcount { get; set; }
}



[cpp]
class cse_alife_helicopter : cse_alife_dynamic_object_visual, cse_motion, cse_ph_skeleton
{
    void on_unregister();
    cse_alife_helicopter(char const*);
    bool can_switch_offline();
    void switch_online();
    cse_abstract* init();
    unsigned int m_level_vertex_id { get; }
    vector& position { get; set; }
    unsigned int m_story_id { get; }
    void switch_offline();
    void STATE_Read(net_packet&,unsigned short);
    void on_register();
    unsigned short id { get; }
    bool keep_saved_data_anyway();
    unsigned short script_version { get; }
    bool can_switch_online();
    vector& angle { get; set; }
    unsigned short m_game_vertex_id { get; }
    void on_spawn();
    bool can_save();
    bool used_ai_locations();
    void STATE_Write(net_packet&);
    unsigned short parent_id { get; }
    void on_before_register();
    bool online { get; }
    bool interactive();
}



[cpp]
class game_sv_mp_script : game_sv_mp
{
    game_PlayerState* createPlayerState();
    void Create(char const*);
    void OnRoundStart();
    void SetHitParams(net_packet*,float,float);
    void OnRoundEnd();
    void Update();
    float GetHitParamsPower(net_packet*);
    char const* type_name();
    void OnEvent(net_packet&,unsigned short,unsigned int,ClientID);
    float GetHitParamsImpulse(net_packet*);
    void SpawnPlayer(ClientID,char const*,char const*,RPoint);
    void switch_Phase(unsigned int);
    unsigned int start_time { get; }
    game_sv_mp_script();
    void OnPlayerHitPlayer(unsigned short,unsigned short,net_packet&);
    struct TeamStruct* GetTeamData(unsigned int);
    enum EGameIDs& type { get; set; }
    void net_Export_State(net_packet&,ClientID);
    int round { get; }
}



[cpp]
class class_info_data
{
    luabind::object methods { get; }
    luabind::string name { get; }
    luabind::object attributes { get; }
}


[cpp]
class FractionState
{
    int bonus { get; set; }
    char const* icon { get; set; }
    float power { get; set; }
    int actor_goodwill { get; set; }
    char const* location { get; set; }
    float resource { get; set; }
    char const* icon_big { get; set; }
    int state_vs { get; set; }
    char const* target { get; set; }
    char const* fraction_id { get; set; }
    char const* target_desc { get; set; }
    char const* name { get; set; }
    int member_count { get; set; }


[cpp]


class game_cl_mp : game_cl_GameState
{
    game_cl_mp();
    game_PlayerState* local_player { get; set; }
    int round { get; }
    unsigned int start_time { get; }
    enum EGameIDs& type { get; set; }
    ClientID& local_svdpnid { get; set; }
}
